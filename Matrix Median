class Solution{
public:
    int upperBound(vector<int> &nums, int x){
        // Set the left and right boundaries
        int left = 0, right = int(nums.size() - 1);
        int ans(nums.size());
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > x) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        
        return ans;
    }

    int cal(vector<vector<int>>& v, int n, int m, int x){
        int cnt(0);
        for(int i(0);i < n;i++){
            cnt += upperBound(v[i], x);
        }

        return cnt;
    }
    int findMedian(vector<vector<int>>&matrix) {
        int low(0),high(INT_MIN);
        int n = matrix.size();
        int m = matrix[0].size();

        for(int i(0);i < matrix.size();i++){
            low = min(low, matrix[i][0]);
            high = max(high, matrix[i][m - 1]);
        }

        int k = (n * m) / 2;
        while(low <= high){
            int mid = low + (high - low) / 2;
            int med = cal(matrix, n, m, mid);
            
            if(med <= k) low = mid + 1;
            else high = mid - 1;
        }

        return low;
    }
};
